// Copyright 2025 Quex Technologies

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @ts-check

import {
  defineDevice,
  defineMethod,
  defineScope,
  defineName,
  defineProcessor,
  defineReturn,
  invokeMethod,
  makeInteger,
  defineBuffer,
  defineIf,
  defineNotify,
  makeNameString,
  defineWhile,
  defineDWordMemory,
  defineQWordMemory,
  ops,
  defineEqual,
  defineAnd,
  defineLess,
} from "./aml.mjs";

/**
 * @typedef {Uint8Array<ArrayBuffer>} bytes
 */

/**
 * @param {number} cpuCount
 * @param {number} memoryBytes
 * @returns {bytes}
 */
export function getAcpi(cpuCount, memoryBytes) {
  const result = new Uint8Array(128 * 1024);
  const facs = getFacs();
  const dsdt = getDsdt(cpuCount, memoryBytes);
  const fadt = getFadt(cpuCount);
  const madt = getMadt(cpuCount);
  const mcfg = getMcfg();
  const waet = getWaet();
  const dsdtOffset = facs.length;
  const fadtOffset = dsdtOffset + dsdt.length;
  const madtOffset = fadtOffset + fadt.length;
  const mcfgOffset = madtOffset + madt.length;
  const waetOffset = mcfgOffset + mcfg.length;
  const rsdtOffset = waetOffset + waet.length;
  result.set(facs, 0);
  result.set(dsdt, dsdtOffset);
  result.set(fadt, fadtOffset);
  result.set(madt, madtOffset);
  result.set(mcfg, mcfgOffset);
  result.set(waet, waetOffset);
  result.set(
    getRsdt([fadtOffset, madtOffset, mcfgOffset, waetOffset]),
    rsdtOffset
  );
  return result;
}

/**
 * @returns {bytes}
 */
function getFacs() {
  const result = new Uint8Array(64);
  const view = new DataView(result.buffer);
  utf8encoder.encodeInto("FACS", result);
  view.setUint32(4, result.length, LE);
  return result;
}

/**
 * @param {number} cpuCount
 * @param {number} memoryBytes
 * @returns {bytes}
 */
function getDsdt(cpuCount, memoryBytes) {
  const result = concatBytes([
    hexToBytes(
      "44534454ac1f00000100424f434853204258504320202020010000004258504301000000"
    ),
    getDsdtAml(cpuCount, memoryBytes),
  ]);
  const view = new DataView(result.buffer);
  view.setUint32(4, result.length, LE);
  return result;
}

/**
 * @param {number} cpuCount
 * @param {number} memoryBytes
 * @returns {bytes}
 */
function getDsdtAml(cpuCount, memoryBytes) {
  return concatBytes([
    defineScope("\\", [
      hexToBytes(
        "5b804442475f010b0204015b810b4442475f014442474208142c44425547019868609660607487600161700062a210956261708388606200444247427562700a0a44424742"
      ),
    ]),
    defineScope("_SB", [
      hexToBytes(
        "5b82490f50434930085f4849440c41d00a08085f4349440c41d00a03085f55494400144c075f4f5343048a6b0043445731a04e05936811130a105b4ddb33f71f1c4096577441c03dd7668a6b0a04434457328a6b0a08434457337043445733607b600a1f60a010929369017d434457310a0843445731a013929343445733607d434457310a1043445731706043445733a10c7d434457310a0443445731a46b144b054544534d0da036936a00701103010060a01a92936811130a10d037c9e553357a4d9117ea4d19c3434da460a00795690a02a460700a8188600000a460a01c936a0a0770120502000d00607083886c000061706188600000a4605b823844524143085f4849440d504e503043303100085f435253111f0a1c871700000c0100000000000000e0ffffffef00000000000000107900"
      ),
    ]),
    defineName("PICF", makeInteger(0)),
    defineMethod("_PIC", 1, false, 0, [hexToBytes("706850494346")]),
    defineScope("_SB", [
      hexToBytes(
        [
          "1043ea504349300850525450124b7380120b040bffff004c4e4b4500120b040bffff014c4e4b4600120c040bffff0a024c4e4b4700120c040bffff",
          "0a034c4e4b4800120d040cffff0100004c4e4b4600120d040cffff0100014c4e4b4700120e040cffff01000a024c4e4b4800120e040cffff01000a034c4e4b4500120d040cffff0200004c4e4b4700120d040cffff0200014c4e4b4800120e040cffff02000a024c4e4b4500120e040cffff02000a034c4e4b4600120d040cffff0300004c4e4b4800120d040cffff0300014c4e4b4500120e040cffff03000a024c4e4b4600120e040cffff03000a034c4e4b4700120d040cffff0400004c4e4b4500120d040cffff0400014c4e4b4600120e040cffff04000a024c4e4b4700120e040cffff04000a034c4e4b4800120d040cffff0500004c4e4b4600120d04",
          "0cffff0500014c4e4b4700120e040cffff05000a024c4e4b4800120e040cffff05000a034c4e4b4500120d040cffff0600004c4e4b4700120d040cffff0600014c4e4b4800120e040cffff06000a024c4e4b4500120e040cffff06000a034c4e4b4600120d040cffff0700004c4e4b4800120d040cffff0700014c4e4b4500120e040cffff07000a024c4e4b4600120e040cffff07000a034c4e4b4700120d040cffff0800004c4e4b4500120d040cffff0800014c4e4b4600120e040cffff08000a024c4e4b4700120e040cffff08000a034c4e4b4800120d040cffff0900004c4e4b4600120d040cffff0900014c4e4b4700120e040cffff09000a024c4e4b",
          "4800120e040cffff09000a034c4e4b4500120d040cffff0a00004c4e4b4700120d040cffff0a00014c4e4b4800120e040cffff0a000a024c4e4b4500120e040cffff0a000a034c4e4b4600120d040cffff0b00004c4e4b4800120d040cffff0b00014c4e4b4500120e040cffff0b000a024c4e4b4600120e040cffff0b000a034c4e4b4700120d040cffff0c00004c4e4b4500120d040cffff0c00014c4e4b4600120e040cffff0c000a024c4e4b4700120e040cffff0c000a034c4e4b4800120d040cffff0d00004c4e4b4600120d040cffff0d00014c4e4b4700120e040cffff0d000a024c4e4b4800120e040cffff0d000a034c4e4b4500120d040cffff0e",
          "00004c4e4b4700120d040cffff0e00014c4e4b4800120e040cffff0e000a024c4e4b4500120e040cffff0e000a034c4e4b4600120d040cffff0f00004c4e4b4800120d040cffff0f00014c4e4b4500120e040cffff0f000a024c4e4b4600120e040cffff0f000a034c4e4b4700120d040cffff1000004c4e4b4500120d040cffff1000014c4e4b4600120e040cffff10000a024c4e4b4700120e040cffff10000a034c4e4b4800120d040cffff1100004c4e4b4600120d040cffff1100014c4e4b4700120e040cffff11000a024c4e4b4800120e040cffff11000a034c4e4b4500120d040cffff1200004c4e4b4700120d040cffff1200014c4e4b4800120e04",
          "0cffff12000a024c4e4b4500120e040cffff12000a034c4e4b4600120d040cffff1300004c4e4b4800120d040cffff1300014c4e4b4500120e040cffff13000a024c4e4b4600120e040cffff13000a034c4e4b4700120d040cffff1400004c4e4b4500120d040cffff1400014c4e4b4600120e040cffff14000a024c4e4b4700120e040cffff14000a034c4e4b4800120d040cffff1500004c4e4b4600120d040cffff1500014c4e4b4700120e040cffff15000a024c4e4b4800120e040cffff15000a034c4e4b4500120d040cffff1600004c4e4b4700120d040cffff1600014c4e4b4800120e040cffff16000a024c4e4b4500120e040cffff16000a034c4e",
          "4b4600120d040cffff1700004c4e4b4800120d040cffff1700014c4e4b4500120e040cffff17000a024c4e4b4600120e040cffff17000a034c4e4b4700120d040cffff1800004c4e4b4500120d040cffff1800014c4e4b4600120e040cffff18000a024c4e4b4700120e040cffff18000a034c4e4b4800120d040cffff1900004c4e4b4100120d040cffff1900014c4e4b4200120e040cffff19000a024c4e4b4300120e040cffff19000a034c4e4b4400120d040cffff1a00004c4e4b4100120d040cffff1a00014c4e4b4200120e040cffff1a000a024c4e4b4300120e040cffff1a000a034c4e4b4400120d040cffff1b00004c4e4b4100120d040cffff1b",
          "00014c4e4b4200120e040cffff1b000a024c4e4b4300120e040cffff1b000a034c4e4b4400120d040cffff1c00004c4e4b4100120d040cffff1c00014c4e4b4200120e040cffff1c000a024c4e4b4300120e040cffff1c000a034c4e4b4400120d040cffff1d00004c4e4b4100120d040cffff1d00014c4e4b4200120e040cffff1d000a024c4e4b4300120e040cffff1d000a034c4e4b4400120d040cffff1e00004c4e4b4500120d040cffff1e00014c4e4b4600120e040cffff1e000a024c4e4b4700120e040cffff1e000a034c4e4b4800120d040cffff1f00004c4e4b4100120d040cffff1f00014c4e4b4200120e040cffff1f000a024c4e4b4300120e",
          "040cffff1f000a034c4e4b44000850525441124b7380120b040bffff004753494500120b040bffff014753494600120c040bffff0a024753494700120c040bffff0a034753494800120d040cffff0100004753494600120d040cffff0100014753494700120e040cffff01000a024753494800120e040cffff01000a034753494500120d040cffff0200004753494700120d040cffff0200014753494800120e040cffff02000a024753494500120e040cffff02000a034753494600120d040cffff0300004753494800120d040cffff0300014753494500120e040cffff03000a024753494600120e040cffff03000a034753494700120d040cffff04000047",
          "53494500120d040cffff0400014753494600120e040cffff04000a024753494700120e040cffff04000a034753494800120d040cffff0500004753494600120d040cffff0500014753494700120e040cffff05000a024753494800120e040cffff05000a034753494500120d040cffff0600004753494700120d040cffff0600014753494800120e040cffff06000a024753494500120e040cffff06000a034753494600120d040cffff0700004753494800120d040cffff0700014753494500120e040cffff07000a024753494600120e040cffff07000a034753494700120d040cffff0800004753494500120d040cffff0800014753494600120e040cffff",
          "08000a024753494700120e040cffff08000a034753494800120d040cffff0900004753494600120d040cffff0900014753494700120e040cffff09000a024753494800120e040cffff09000a034753494500120d040cffff0a00004753494700120d040cffff0a00014753494800120e040cffff0a000a024753494500120e040cffff0a000a034753494600120d040cffff0b00004753494800120d040cffff0b00014753494500120e040cffff0b000a024753494600120e040cffff0b000a034753494700120d040cffff0c00004753494500120d040cffff0c00014753494600120e040cffff0c000a024753494700120e040cffff0c000a034753494800",
          "120d040cffff0d00004753494600120d040cffff0d00014753494700120e040cffff0d000a024753494800120e040cffff0d000a034753494500120d040cffff0e00004753494700120d040cffff0e00014753494800120e040cffff0e000a024753494500120e040cffff0e000a034753494600120d040cffff0f00004753494800120d040cffff0f00014753494500120e040cffff0f000a024753494600120e040cffff0f000a034753494700120d040cffff1000004753494500120d040cffff1000014753494600120e040cffff10000a024753494700120e040cffff10000a034753494800120d040cffff1100004753494600120d040cffff11000147",
          "53494700120e040cffff11000a024753494800120e040cffff11000a034753494500120d040cffff1200004753494700120d040cffff1200014753494800120e040cffff12000a024753494500120e040cffff12000a034753494600120d040cffff1300004753494800120d040cffff1300014753494500120e040cffff13000a024753494600120e040cffff13000a034753494700120d040cffff1400004753494500120d040cffff1400014753494600120e040cffff14000a024753494700120e040cffff14000a034753494800120d040cffff1500004753494600120d040cffff1500014753494700120e040cffff15000a024753494800120e040cff",
          "ff15000a034753494500120d040cffff1600004753494700120d040cffff1600014753494800120e040cffff16000a024753494500120e040cffff16000a034753494600120d040cffff1700004753494800120d040cffff1700014753494500120e040cffff17000a024753494600120e040cffff17000a034753494700120d040cffff1800004753494500120d040cffff1800014753494600120e040cffff18000a024753494700120e040cffff18000a034753494800120d040cffff1900004753494100120d040cffff1900014753494200120e040cffff19000a024753494300120e040cffff19000a034753494400120d040cffff1a00004753494100",
          "120d040cffff1a00014753494200120e040cffff1a000a024753494300120e040cffff1a000a034753494400120d040cffff1b00004753494100120d040cffff1b00014753494200120e040cffff1b000a024753494300120e040cffff1b000a034753494400120d040cffff1c00004753494100120d040cffff1c00014753494200120e040cffff1c000a024753494300120e040cffff1c000a034753494400120d040cffff1d00004753494100120d040cffff1d00014753494200120e040cffff1d000a024753494300120e040cffff1d000a034753494400120d040cffff1e00004753494500120d040cffff1e00014753494600120e040cffff1e000a02",
          "4753494700120e040cffff1e000a034753494800120d040cffff1f00004753494100120d040cffff1f00014753494200120e040cffff1f000a024753494300120e040cffff1f000a034753494400141a5f50525400a00c935049434600a450525450a106a45052544114134951535401a0097b0a806800a40a09a40a0b143449514352090850525230110e0a0b8906000b010000000079008a505252300a0550525249707b680a0f0050525249a4505252305b824c074c4e4b41085f4849440c41d00c0f085f55494400085f50525311160a13890e000b03050000000a0000000b0000007900140f5f53544100a4495153545052514114115f444953007d5052",
          "51410a8050525141140f5f43525300a4495143525052514114175f535253018a680a05505252497050525249505251415b824c074c4e4b42085f4849440c41d00c0f085f55494401085f50525311160a13890e000b03050000000a0000000b0000007900140f5f53544100a4495153545052514214115f444953007d505251420a8050525142140f5f43525300a4495143525052514214175f535253018a680a05505252497050525249505251425b824d074c4e4b43085f4849440c41d00c0f085f5549440a02085f50525311160a13890e000b03050000000a0000000b0000007900140f5f53544100a4495153545052514314115f444953007d505251430a",
          "8050525143140f5f43525300a4495143525052514314175f535253018a680a05505252497050525249505251435b824d074c4e4b44085f4849440c41d00c0f085f5549440a03085f50525311160a13890e000b03050000000a0000000b0000007900140f5f53544100a4495153545052514414115f444953007d505251440a8050525144140f5f43525300a4495143525052514414175f535253018a680a05505252497050525249505251445b824d074c4e4b45085f4849440c41d00c0f085f5549440a04085f50525311160a13890e000b03050000000a0000000b0000007900140f5f53544100a4495153545052514514115f444953007d505251450a8050",
          "525145140f5f43525300a4495143525052514514175f535253018a680a05505252497050525249505251455b824d074c4e4b46085f4849440c41d00c0f085f5549440a05085f50525311160a13890e000b03050000000a0000000b0000007900140f5f53544100a4495153545052514614115f444953007d505251460a8050525146140f5f43525300a4495143525052514614175f535253018a680a05505252497050525249505251465b824d074c4e4b47085f4849440c41d00c0f085f5549440a06085f50525311160a13890e000b03050000000a0000000b0000007900140f5f53544100a4495153545052514714115f444953007d505251470a80505251",
          "47140f5f43525300a4495143525052514714175f535253018a680a05505252497050525249505251475b824d074c4e4b48085f4849440c41d00c0f085f5549440a07085f50525311160a13890e000b03050000000a0000000b0000007900140f5f53544100a4495153545052514814115f444953007d505251480a8050525148140f5f43525300a4495143525052514814175f535253018a680a05505252497050525249505251485b824d0447534941085f4849440c41d00c0f085f5549440a10085f505253110e0a0b8906000b01100000007900085f435253110e0a0b8906000b0110000000790014065f4449530014065f535253015b824d044753494208",
          "5f4849440c41d00c0f085f5549440a11085f505253110e0a0b8906000b01110000007900085f435253110e0a0b8906000b0111000000790014065f4449530014065f535253015b824d0447534943085f4849440c41d00c0f085f5549440a12085f505253110e0a0b8906000b01120000007900085f435253110e0a0b8906000b0112000000790014065f4449530014065f535253015b824d0447534944085f4849440c41d00c0f085f5549440a13085f505253110e0a0b8906000b01130000007900085f435253110e0a0b8906000b0113000000790014065f4449530014065f535253015b824d0447534945085f4849440c41d00c0f085f5549440a14085f50",
          "5253110e0a0b8906000b01140000007900085f435253110e0a0b8906000b0114000000790014065f4449530014065f535253015b824d0447534946085f4849440c41d00c0f085f5549440a15085f505253110e0a0b8906000b01150000007900085f435253110e0a0b8906000b0115000000790014065f4449530014065f535253015b824d0447534947085f4849440c41d00c0f085f5549440a16085f505253110e0a0b8906000b01160000007900085f435253110e0a0b8906000b0116000000790014065f4449530014065f535253015b824d0447534948085f4849440c41d00c0f085f5549440a17085f505253110e0a0b8906000b01170000007900085f",
          "435253110e0a0b8906000b0117000000790014065f4449530014065f53525301",
        ].join("")
      ),
    ]),
    defineScope("_GPE", [hexToBytes("085f4849440d414350493030303600")]),
    defineScope("_SB", [
      defineDevice("\\_SB.PCI0.PRES", [
        hexToBytes(
          "085f4849440c41d00a06085f5549440d43505520486f74706c7567207265736f7572636573005b0143504c4b00085f435253110d0a0a4701d80cd80c010c79005b8050525354010bd80c0a0c5b8128505253544100204350454e0143494e530143524d560143454a300143454a4601000343434d44085b811250525354034353454c2000204344415420140c5f494e490870004353454c"
        ),
      ]),
      defineDevice("\\_SB.CPUS", [
        hexToBytes("085f4849440d414350493030313000085f4349440c41d00a05"),
        defineMethod(
          "CTFY",
          2,
          false,
          0,
          [...Array(cpuCount).keys()].map((id) =>
            defineIf(defineEqual(ops.arg0, makeInteger(id)), [
              defineNotify(makeNameString(getDsdtProcessorName(id)), ops.arg1),
            ])
          )
        ),
        defineMethod("CSTA", 1, true, 0, [
          hexToBytes(
            "5b235c2f045f53425f504349305052455343504c4bffff70685c2f045f53425f50434930505245534353454c700060a01a935c2f045f53425f50434930505245534350454e01700a0f605b275c2f045f53425f504349305052455343504c4ba460"
          ),
        ]),
        hexToBytes(
          "144d0543454a30095b235c2f045f53425f504349305052455343504c4bffff70685c2f045f53425f50434930505245534353454c70015c2f045f53425f504349305052455343454a305b275c2f045f53425f504349305052455343504c4b"
        ),
        defineMethod("CSCN", 0, true, 0, [
          hexToBytes(
            "5b235c2f045f53425f504349305052455343504c4bffff08434e45571202ff700063700164"
          ),
          defineWhile(defineEqual(ops.local4, makeInteger(1)), [
            hexToBytes("700064700160700061"),
            defineWhile(
              defineAnd(
                defineEqual(ops.local0, makeInteger(1)),
                defineLess(ops.local3, makeInteger(cpuCount))
              ),
              [
                hexToBytes(
                  "70006070635c2f045f53425f50434930505245534353454c70005c2f045f53425f504349305052455343434d44a017955c2f045f53425f50434930505245534344415463a5a00993610aff700164a5705c2f045f53425f50434930505245534344415463a024935c2f045f53425f504349305052455343494e5301706388434e455761007561700160a137a035935c2f045f53425f504349305052455343524d560143544659630a0370015c2f045f53425f504349305052455343524d567001607563"
                ),
              ]
            ),
            hexToBytes(
              "700062a24504956261708388434e455762006343544659630170635b3170635c2f045f53425f50434930505245534353454c70015c2f045f53425f504349305052455343494e537562"
            ),
          ]),
          hexToBytes("5b275c2f045f53425f504349305052455343504c4b"),
        ]),
        hexToBytes(
          "144d09434f53540c5b235c2f045f53425f504349305052455343504c4bffff70685c2f045f53425f50434930505245534353454c70015c2f045f53425f504349305052455343434d4470695c2f045f53425f504349305052455343444154700a025c2f045f53425f504349305052455343434d44706a5c2f045f53425f5043493050524553434441545b275c2f045f53425f504349305052455343504c4b"
        ),
        ...[...Array(cpuCount).keys()].map((id) =>
          defineProcessor(getDsdtProcessorName(id), id, 0, 0, [
            defineMethod("_STA", 0, true, 0, [
              defineReturn(invokeMethod("CSTA", [makeInteger(id)])),
            ]),
            defineName(
              "_MAT",
              defineBuffer(
                new Uint8Array([0x00, 0x08, id, id, 0x01, 0x00, 0x00, 0x00])
              )
            ),
            id > 0
              ? defineMethod("_EJ0", 1, false, 0, [
                  invokeMethod("CEJ0", [makeInteger(id)]),
                ])
              : new Uint8Array(0),
            defineMethod("_OST", 3, true, 0, [
              invokeMethod("COST", [
                makeInteger(id),
                ops.arg0,
                ops.arg1,
                ops.arg2,
              ]),
            ]),
          ])
        ),
      ]),
    ]),
    defineMethod("\\_GPE._E02", 0, false, 0, [
      hexToBytes("5c2f035f53425f435055534353434e"),
    ]),
    defineScope("\\_SB.PCI0", [
      defineName(
        "_CRS",
        defineBuffer(
          concatBytes([
            hexToBytes(
              "880d00020c0000000000ff0000000001" +
                "4701f80cf80c0108" +
                "880d00010c0300000000f70c0000f80c" +
                "880d00010c030000000dffff000000f3"
            ),
            defineDWordMemory(
              true,
              0x00000000,
              0x000a0000,
              0x000bffff,
              0x00000000,
              0x00020000
            ),
            defineDWordMemory(
              false,
              0x00000000,
              memoryBytes > 0xb0000000 ? 0x80000000 : memoryBytes,
              0xdfffffff,
              0x00000000,
              memoryBytes > 0xb0000000 ? 0x60000000 : 0xe0000000 - memoryBytes
            ),
            defineDWordMemory(
              false,
              0x00000000,
              0xf0000000,
              0xfebfffff,
              0x00000000,
              0x0ec00000
            ),
            defineQWordMemory(
              true,
              0x0000000000000000n,
              0x0000380000000000n,
              0x00003807ffffffffn,
              0x0000000000000000n,
              0x0000000800000000n
            ),
            new Uint8Array([0x79, 0x00]),
          ])
        )
      ),
      defineDevice("GPE0", [
        hexToBytes(
          "085f4849440d504e503041303600085f5549440d47504530207265736f757263657300085f5354410a0b085f435253110d0a0a47012006200601107900"
        ),
      ]),
    ]),
    defineScope("\\", [defineName("_S5", hexToBytes("12060400000000"))]),
    defineScope("\\_SB.PCI0", [
      hexToBytes(
        "5b822e46574346085f4849440d51454d553030303200085f5354410a0b085f435253110d0a0a470110051005010c7900"
      ),
    ]),
    defineScope("\\_SB", [
      defineScope("PCI0", [
        defineDevice("S00", [defineName("_ADR", makeInteger(0))]),
        defineDevice("S08", [defineName("_ADR", makeInteger(0x00010000))]),
        defineDevice("SF8", [
          hexToBytes(
            "085f4144520c00001f005b8050495251020a600a0c1043045c5f53425f5b813a2f03504349305346385f50495251015052514108505251420850525143085052514408002050525145085052514608505251470850525148085b82255254435f085f4849440c41d00b00085f43525311100a0d47017000700001082200017900"
          ),
        ]),
      ]),
    ]),
  ]);
}

/**
 * @param {number} id
 * @returns {string}
 */
function getDsdtProcessorName(id) {
  return `C${id.toString(16).toUpperCase().padStart(3, "0")}`;
}

/**
 * @param {number} cpuCount
 * @returns {bytes}
 */
function getFadt(cpuCount) {
  const result = hexToBytes(
    "46414350f40000000300424f434853204258504320202020010000004258504301000000000000004000000001000900000000000000000000060000000000000406000000000000000000000806000020060000000000000402000410000000ff0fff0f000000000000000032000000a584000001080000f90c0000000000000f00000000000000000000004000000000000000012000000006000000000000000000000000000000000000011000000406000000000000000000000000000000000000000000000000000000000000012000000806000000000000018000002006000000000000000000000000000000000000"
  );
  result.set(
    new Uint8Array([0xa5, 0x84, cpuCount > 8 ? 0x04 : 0x00, 0x00]),
    112
  );
  return result;
}

/**
 * @param {number} cpuCount
 * @returns {bytes}
 */
function getMadt(cpuCount) {
  const header = hexToBytes(
    "415049431e0100000300424f4348532042585043202020200100000042585043010000000000e0fe01000000"
  );
  const footer = hexToBytes(
    "010c00000000c0fe00000000020a0000020000000500020a0001010000000500020a0002020000000500020a0003030000000500020a0004040000000500020a0005050000000500020a0006060000000500020a0007070000000500020a0008080000000500020a0009090000000500020a000a0a0000000500020a000b0b0000000500020a000c0c0000000500020a000d0d0000000500020a000e0e0000000500020a000f0f00000005000406ff000001"
  );
  const cpuEntrySize = 8;
  const result = new Uint8Array(
    header.length + cpuCount * cpuEntrySize + footer.length
  );
  const view = new DataView(result.buffer);

  result.set(header, 0);
  view.setUint32(4, result.length, LE);

  for (let i = 0; i < cpuCount; i++) {
    const offset = header.length + i * cpuEntrySize;
    result[offset] = 0;
    result[offset + 1] = 8;
    result[offset + 2] = i;
    result[offset + 3] = i;
    view.setUint32(offset + 4, 1, LE);
  }

  result.set(footer, header.length + cpuCount * cpuEntrySize);

  return result;
}

/**
 * @returns {bytes}
 */
function getMcfg() {
  return hexToBytes(
    "4d4346473c0000000100424f4348532042585043202020200100000042585043010000000000000000000000000000e000000000000000ff00000000"
  );
}

/**
 * @returns {bytes}
 */
function getWaet() {
  return hexToBytes(
    "57414554280000000100424f43485320425850432020202001000000425850430100000002000000"
  );
}

/**
 * @param {number[]} pointers
 * @returns {bytes}
 */
function getRsdt(pointers) {
  const header = hexToBytes(
    "52534454240000000100424f434853204258504320202020010000004258504301000000"
  );
  const result = new Uint8Array(header.length + pointers.length * 4);
  const view = new DataView(result.buffer);
  result.set(header, 0);
  view.setUint32(4, result.length, LE);
  for (let i = 0; i < pointers.length; i++) {
    view.setUint32(header.length + i * 4, pointers[i], LE);
  }
  return result;
}

const utf8encoder = new TextEncoder();
const LE = true;

/**
 * @param {string} hex
 * @returns {bytes}
 */
function hexToBytes(hex) {
  const result = new Uint8Array(hex.length / 2);
  for (let i = 0; i < result.length; i++) {
    result[i] = parseInt(hex.substring(2 * i, 2 * i + 2), 16);
  }
  return result;
}

/**
 * @param {bytes[]} byteArrays
 * @param {number=} length
 * @returns {bytes}
 */
function concatBytes(
  byteArrays,
  length = byteArrays.reduce((len, bytes) => len + bytes.length, 0)
) {
  const result = new Uint8Array(length);
  let offset = 0;
  for (const bytes of byteArrays) {
    result.set(bytes, offset);
    offset += bytes.length;
  }
  return result;
}
